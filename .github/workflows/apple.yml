on:
  push:
  pull_request:
  schedule:
    - cron: '13 15 * * *'
jobs:
  # We need to build our own sccache until e6326bc8a20ee06af37e16a3a7a14e3374c66c66
  # is in a released version.
  sccache:
    runs-on: 'macos-10.15'
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal

      - uses: actions/checkout@v2
        with:
          repository: mozilla/sccache
          # Update cache key if this changes.
          ref: e6326bc8a20ee06af37e16a3a7a14e3374c66c66
          fetch-depth: 0

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-sccache-${{ hashFiles('Cargo.lock') }}-0

      - name: Build sccache
        run: |
          cargo build --release

      - name: Upload sccache executable
        uses: actions/upload-artifact@v2
        with:
          name: sccache
          path: target/release/sccache

  pythonbuild:
    runs-on: 'macos-10.15'
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-pythonbuild-${{ hashFiles('Cargo.lock') }}

      - name: Build
        run: |
          cargo build --release

      - name: Upload pythonbuild Executable
        uses: actions/upload-artifact@v2
        with:
          name: pythonbuild
          path: target/release/pythonbuild

  toolchain:
    needs:
      - sccache
    runs-on: 'macos-10.15'
    env:
      SCCACHE_DIR: ${{ github.workspace }}/.sccache
    steps:
      - uses: actions/checkout@v2

      - name: Cache build dir
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: build/*.tar
          key: ${{ runner.os }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-

      - name: Cache sccache dir
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-          

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Download sccache
        uses: actions/download-artifact@v2
        with:
          name: sccache

      - name: Start sccache
        run: |
          chmod +x sccache
          ./sccache --start-server

      - name: Build
        run: |
          python3.9 ./build-macos.py --make-target toolchain

      - name: Stop sccache
        run: |
          ./sccache -s

      - name: Upload Toolchain Archive
        uses: actions/upload-artifact@v2
        with:
          name: toolchain
          path: build/clang-*.tar

  build:
    strategy:
      fail-fast: false
      matrix:
        triple:
          - 'aarch64-apple-darwin'
          - 'aarch64-apple-ios'
          - 'x86_64-apple-darwin'
          - 'x86_64-apple-ios'
        py:
          - 'cpython-3.8'
          - 'cpython-3.9'
        optimizations:
          - 'debug'
          - 'noopt'
          - 'lto'
          - 'pgo'
          - 'pgo+lto'
        exclude:
          # Cross-compiling only supported by CPython 3.9+.
          - triple: 'aarch64-apple-darwin'
            py: 'cpython-3.8'
          - triple: 'aarch64-apple-ios'
            py: 'cpython-3.8'
          - triple: 'x86_64-apple-ios'
            py: 'cpython-3.8'
          # PGO doesn't work when cross-compiling. Goal with following
          # rules is to disable PGO when cross-compiling and disable noopt
          # for host builds (since PGO is superior).
          - triple: 'aarch64-apple-darwin'
            optimizations: 'pgo'
          - triple: 'aarch64-apple-darwin'
            optimizations: 'pgo+lto'
          - triple: 'aarch64-apple-ios'
            optimizations: 'pgo'
          - triple: 'aarch64-apple-ios'
            optimizations: 'pgo+lto'
          - triple: 'x86_64-apple-darwin'
            optimizations: 'noopt'
          - triple: 'x86_64-apple-ios'
            optimizations: 'pgo'
          - triple: 'x86_64-apple-ios'
            optimizations: 'pgo+lto'
    needs:
      - pythonbuild
      - toolchain
    runs-on: 'macos-10.15'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Download pythonbuild
        uses: actions/download-artifact@v2
        with:
          name: pythonbuild
          path: build

      - name: Download toolchain
        uses: actions/download-artifact@v2
        with:
          name: toolchain
          path: build

      - name: Build
        run: |
          # Force use of 10.15 SDK on Python 3.8, as it has trouble with macOS 11 SDK.
          if [ "${{ matrix.py }}" = "cpython-3.8" ]; then
             export APPLE_SDK_PATH=/Applications/Xcode_12.1.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
             export APPLE_HOST_SDK_PATH=/Applications/Xcode_12.1.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
          else
             export APPLE_HOST_SDK_PATH=/Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk

             if [ "${{ matrix.triple }}" = "aarch64-apple-darwin" ]; then
               export APPLE_SDK_PATH=/Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk
             elif [ "${{ matrix.triple }}" = "aarch64-apple-ios" ]; then
               export APPLE_SDK_PATH=/Applications/Xcode_12.4.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.4.sdk
             elif [ "${{ matrix.triple }}" = "x86_64-apple-darwin" ]; then
               export APPLE_SDK_PATH=/Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk
             elif [ "${{ matrix.triple }}" = "x86_64-apple-ios" ]; then
               export APPLE_SDK_PATH=/Applications/Xcode_12.4.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator14.4.sdk
             else
               echo "unhandled target triple: ${{ matrix.triple }}"
               exit 1
             fi
          fi

          ./build-macos.py --skip-toolchain --target-triple ${{ matrix.triple }} --python ${{ matrix.py }} --optimizations ${{ matrix.optimizations }}

      - name: Validate Distribution
        run: |
          chmod +x build/pythonbuild
          build/pythonbuild validate-distribution dist/*.tar.zst

      - name: Upload Distributions
        uses: actions/upload-artifact@v2
        with:
          name: dists-macos
          path: dist/*
